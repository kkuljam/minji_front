JS 메모리  
    1.변수 let
        - 변할 수 있는 수라는 의미로 값을 수정할 수 있음
        - let 변수 = 10
        - let 변수 = 1 --> 값 수정 가능
    2.상수 const    
        - 항상 같은 수라는 의미로 값에 이름을 한 번 붙이면 값을 수정할 수 없음
        - const 상수 = 10
        - const 상수 = 7 --> 값 수정 불가능

JS 자료형  
    3. 숫자
        - number. 273 
    4. 문자열
        - " ", ' ' 사용되면 문자열. 
        - "안녕하세요". '안녕하세요'
    5. 불
        - 참과 거짓 값을 표현할 때 사용
        - true false
        - console.log(273>52);
    6. 배열
        - 자료를 묶어 활용할 수 있는 특수한 자료. 여러 변수를 한 번에 선언해 다룰 수 있는 자료형
        - cosnt 배열 =[ ]
        - cosnt 배열 =[유재석, 44, true]
    7. 함수
        - 코드의 집합을 나타내는 자료형
        -1. 익명함수 function (){}  2. 선언함수 function
        -function 함수 (매개변수){
            문장
            문장
            return 리턴값
        }
    8. 객체
        - 실제로 존재하는 사물
        - const/let 변수명 = { key : value, key : value} / key는 중복 불가능. 쉼표로 구분
        - const 수집 = {이름: 유재석, 나이: 44, 취미:음악}

    let 변수명 = 10
    let 변수명 = '10'
    let 변수명 = true
    let 변수명 = [13, 24, 34]
    let 변수명 = function (){}
    let 변수명 = {이름: 유재석, 나이: 41, 취미: 음악}

    const 변수명 = 10
    const 변수명 = '10'
    const 변수명 = true
    const 변수명 = [13, 24, 34]
    const 변수명 = function (){}
    const 변수명 = {이름: 유재석, 나이: 41, 취미: 음악}

각 문법/자료형 정의
각 문법/자료형 형태/모양
각 문법/자료형 간단한 활용 예시

================================================
1. 문법
	1. 변수 : 변할 수 있는 수. 변수에 저장된 값은 변경될 수 있다.
		- 형태 : *let 변수명(중복 선언 불가.) ,
			      var 변수명(중복선언 가능, 마지막에 선언된 값이 적용됨) 

		- 예시) let 자바 = 10;
			console.log(자바);   =>  10 출력

	2. 상수 : 변할 수 없는 수. 상수에 저장된 값은 변경 될 수 없다.	
		**예외 : const에 객체를 선언하면 객체 내 값 변경이 가능하다.
		- 형태 : const 상수명 = 10;

		- 예시) const 자바 = 10;
			//자바=5;   =>  상수이기때문에 error 
			console.log(자바);     =>    10출력

2. 자료형
	1. 숫자 : number
		- 형태 : let/const 변수/상수명 = Number(); ,
			 let/const 변수/상수명 = 123;(따옴표 없음)

		- 예시) 123, Number(123), 
			Number(true)  =>  숫자 1 출력
	
	2. 문자열 : string, 문자로 이루어진 자료
		- 형태 : let/const 변수/상수명 = '123'; => '' , "" 두 따옴표 중 선택해서 감싸면 문자열로 인식 , 
			let/const 변수/상수명 = 가나다라; , 
			let/const 변수/상수명 = String(123);	
			
		** ' " => 따옴표 혼용사용 시 인식 불가 / \' , \" 처럼 연산자 앞에 "\"를 붙이면 문자열로 출력 가능

		- 예시)'123', String(123), '가나다라', 
			" \'그래서?\' "  =>  문자열 출력 : '그래서?'
		
	3. 불 : boolean, 참 또는 거짓(1 또는 0, true 또는 false)로만 표현되는 자료형
		- 형태 : let/const 변수/상수명 = true/false; , 
			let/const 변수/상수명 = Boolean();
		
		- 예시) true, Boolean(1), Boolean(1>0), Boolean(1234), Boolean('가나다라')  =>  true 출력

	4. 배열 : 여러 자료를 묶어서 사용할 수 있는 자료형
		- 형태 : let/const 변수/상수명 = [요소1 , 요소2 , 요소3 , ...];
				인덱스 :          0        1        2
			**요소(내부값)는 쉼표로 구분.
			**요소는 숫자, 불, 문자열, 배열, 함수, 객체 모두 입력 가능
			**요소는 인덱스 번호로 식별할 수 있다( 0부터 시작 )
		
		- 예시) let 배열1 = [요소1 , 요소2 , 요소3 , ...];
			console.log(배열1(0));   =>   요소1 출력

	5. 함수 : 코드의 집합을 담고있는 자료형
		- 형태 : function(){} : 익명함수, 함수 호출 불가능, 변수/ 상수에 넣을 경우 변수/상수명으로 호출 가능
			function 함수명 (){} : 선언적함수, 함수명으로 호출 가능
			function 함수 (매개변수){  문장1    문장2    return 리턴값; }

		- 예시) - let 함수1 = function(){ console.log('안녕하세요'); }
			함수1();  => 안녕하세요 출력
		         - function 함수2 (매개변수){ console.log(매개변수); }
			함수2( '안녕하세요' );  => 안녕하세요 출력

	6. 객체 : (현실세계X 현실세계 없더라도 개념을 코드화 해서 메모리 만들어내면)실제 존재하는 사물이라는 뜻을 담고 있음 (object)
                - 실제 존재하지 않는 개념/무형적을 설계해서 객체
                - 실제 존재하는 것(객체)

		- 형태 : let/const 변수/상수명 = { 속성1 : value1 , 속성2 : value2 , 속성3 : value3 }
			변수/상수명.속성명 => value 출력
			**key는 중복 불가능. 쉼표로 구분

		-예시 : let 객체1 = { 속성1 : value1 , 속성2 : value2 , 속성3 : value3 }
			const.log(객체1.속성1);  =>  value1 출력